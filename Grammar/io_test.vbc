// 测试底层文件 I/O 功能

builtin_println("--- 开始 I/O 测试 ---");

string file_path = "io_test_output.txt";
string content_to_write = "Hello from verbose-c!";
int permissions = 420; // 八进制 0o644 的十进制表示

// --- 写入文件 ---
builtin_println("1. 尝试写入文件...");
// O_WRONLY | O_CREAT | O_TRUNC
// 在大多数系统中，这些标志位不重叠，可以用加法代替位或
int write_flags = O_WRONLY + O_CREAT + O_TRUNC; 
int write_fd = open(file_path, write_flags, permissions);

if (write_fd < 0) {
    builtin_println("错误: 打开文件用于写入失败!");
} else {
    builtin_println("文件打开成功 (写入模式), 文件描述符: " + (string)write_fd);
    
    int bytes_written = write(write_fd, content_to_write);
    builtin_println("尝试写入字节数: " + (string)len(content_to_write));
    builtin_println("实际写入字节数: " + (string)bytes_written);
    
    int close_status = close(write_fd);
    if (close_status == 0) {
        builtin_println("文件描述符 (写入) 关闭成功。");
    } else {
        builtin_println("错误: 关闭文件描述符 (写入) 失败!");
    }
}

builtin_println(""); // 打印空行

// --- 读取文件 ---
builtin_println("2. 尝试读取文件...");
int read_flags = O_RDONLY;
int read_fd = open(file_path, read_flags, 0);

if (read_fd < 0) {
    builtin_println("错误: 打开文件用于读取失败!");
} else {
    builtin_println("文件打开成功 (读取模式), 文件描述符: " + (string)read_fd);
    
    // 将指针移动到文件开头 (虽然刚打开时就在开头，但为了测试lseek)
    lseek(read_fd, 0, SEEK_SET);
    
    // 读取最多 100 个字节
    string read_content = read(read_fd, 100);
    
    builtin_println("读取到的内容: " + read_content);
    
    // 验证内容
    if (read_content == content_to_write) {
        builtin_println("验证成功: 读取内容与写入内容一致!");
    } else {
        builtin_println("验证失败: 读取内容与写入内容不一致!");
    }
    
    int close_status = close(read_fd);
    if (close_status == 0) {
        builtin_println("文件描述符 (读取) 关闭成功。");
    } else {
        builtin_println("错误: 关闭文件描述符 (读取) 失败!");
    }
}


builtin_println("\n--- I/O 测试结束 ---");
